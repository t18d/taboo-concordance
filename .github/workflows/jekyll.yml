# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ['main']
    paths:
      - '**.css'
      - '**.html'
      - .github/workflows/jekyll.yml
      - _config.yml

  workflow_run:
    workflows:
      - "Generate README.md"
    types: [completed]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    if: ${{ 
      (github.event_name == 'workflow_run' 
        && github.event.workflow_run.conclusion == 'success') 
      || github.event_name == 'workflow_dispatch' 
      || github.event_name == 'push' 
      }}
    runs-on: blacksmith-4vcpu-ubuntu-2404
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          # Do a sparse checkout on given patterns. Each pattern should be separated with
          # new lines.
          # Default: null
          sparse-checkout: |
            _includes/
            _layouts/
            assets/css/
            assets/font/
            assets/svg/

      - name: Detect latest cached Ruby
        run: |
          if [ -d "/opt/hostedtoolcache/Ruby" ]; then
            LATEST_RUBY=$(ls -d /opt/hostedtoolcache/Ruby/*/x64/bin \
              | awk -F/ '{print $5}' \
              | sort -V \
              | tail -1)

            echo "LATEST_RUBY_VERSION=$LATEST_RUBY" >> $GITHUB_ENV
            echo "Latest cached Ruby: $LATEST_RUBY"
          else
            echo "No cached Ruby found; falling back to 'ruby'."
            echo "LATEST_RUBY_VERSION=ruby" >> $GITHUB_ENV
          fi
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.LATEST_RUBY_VERSION }}
          bundler-cache: true
          cache-version: 0
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        # Outputs to the './_site' directory by default
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          enable-cache: true

      - name: Install dependencies
        run: |
          bun install
          uv venv
          uv pip install -r requirements.txt

      - name: PurgeCSS
        run: |
          bunx purgecss \
            --content "_site/index.html" \
            --css "_site/assets/css/default.css" \
            --output "_site/assets/css"

      - name: Cache FSung.woff2
        id: cache-FSung
        uses: actions/cache@v4
        with:
          path: _site/assets/FSung.woff2
          key: cache-${{ hashFiles('concordance.csv') }}
      - name: Generate FSung.woff2
        if: steps.cache-FSung.outputs.cache-hit != 'true'
        run: |
          source .venv/bin/activate
          bunx glyphhanger ./_site/index.html --formats=woff2 \
            --subset=assets/font/*.ttf
          fonttools merge assets/font/*subset*
          bunx glyphhanger --subset=merged.ttf --formats=woff2
          cp merged-subset.woff2 _site/assets/FSung.woff2

      - name: Install minify
        run: |
          curl -L https://github.com/tdewolff/minify/releases/latest/download/minify_linux_amd64.tar.gz \
            | tar -xz
          sudo mv minify /usr/local/bin/minify

      - name: Minify HTML, CSS, JSON, SVG, XML
        run: |
          minify \
            -r -i \
            --match '*.html' '*.css' '*.json' '*.svg' '*.xml' \
            -- ./_site

      - name: Upload artifact
        # Automatically uploads an artifact from the './_site' directory by default
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: blacksmith-4vcpu-ubuntu-2404
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
